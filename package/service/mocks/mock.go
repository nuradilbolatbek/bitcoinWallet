// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	bitcoinWallet "bitcoinWallet"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserAuthentication is a mock of UserAuthentication interface.
type MockUserAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthenticationMockRecorder
}

// MockUserAuthenticationMockRecorder is the mock recorder for MockUserAuthentication.
type MockUserAuthenticationMockRecorder struct {
	mock *MockUserAuthentication
}

// NewMockUserAuthentication creates a new mock instance.
func NewMockUserAuthentication(ctrl *gomock.Controller) *MockUserAuthentication {
	mock := &MockUserAuthentication{ctrl: ctrl}
	mock.recorder = &MockUserAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthentication) EXPECT() *MockUserAuthenticationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserAuthentication) CreateUser(user bitcoinWallet.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserAuthenticationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserAuthentication)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockUserAuthentication) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockUserAuthenticationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockUserAuthentication)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockUserAuthentication) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserAuthenticationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUserAuthentication)(nil).ParseToken), token)
}

// MockWalletManagement is a mock of WalletManagement interface.
type MockWalletManagement struct {
	ctrl     *gomock.Controller
	recorder *MockWalletManagementMockRecorder
}

// MockWalletManagementMockRecorder is the mock recorder for MockWalletManagement.
type MockWalletManagementMockRecorder struct {
	mock *MockWalletManagement
}

// NewMockWalletManagement creates a new mock instance.
func NewMockWalletManagement(ctrl *gomock.Controller) *MockWalletManagement {
	mock := &MockWalletManagement{ctrl: ctrl}
	mock.recorder = &MockWalletManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletManagement) EXPECT() *MockWalletManagementMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletManagement) CreateWallet(userID int, wallet bitcoinWallet.Wallet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", userID, wallet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletManagementMockRecorder) CreateWallet(userID, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletManagement)(nil).CreateWallet), userID, wallet)
}

// DepositToWallet mocks base method.
func (m *MockWalletManagement) DepositToWallet(walletID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositToWallet", walletID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositToWallet indicates an expected call of DepositToWallet.
func (mr *MockWalletManagementMockRecorder) DepositToWallet(walletID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositToWallet", reflect.TypeOf((*MockWalletManagement)(nil).DepositToWallet), walletID, amount)
}

// GetWalletByUserID mocks base method.
func (m *MockWalletManagement) GetWalletByUserID(userID int) (bitcoinWallet.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", userID)
	ret0, _ := ret[0].(bitcoinWallet.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MockWalletManagementMockRecorder) GetWalletByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockWalletManagement)(nil).GetWalletByUserID), userID)
}

// WithdrawFromWallet mocks base method.
func (m *MockWalletManagement) WithdrawFromWallet(walletID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromWallet", walletID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromWallet indicates an expected call of WithdrawFromWallet.
func (mr *MockWalletManagementMockRecorder) WithdrawFromWallet(walletID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromWallet", reflect.TypeOf((*MockWalletManagement)(nil).WithdrawFromWallet), walletID, amount)
}
